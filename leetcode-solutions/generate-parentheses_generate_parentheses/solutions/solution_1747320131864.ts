out.push(path.join(''));            return;        }        if(openParens < n){            path.push('(');        }    }            backtrack(openParens+1, closedParens, path);            path.pop();    backtrack(0, 0, []);        if(closedParens < openParens){            path.push(')');        }            backtrack(openParens, closedParens+1, path);            path.pop();    return out;        if(openParens+closedParens === n*2){    function backtrack(openParens: number, closedParens: number, path: string[]) {    if(n < 1) return out;    const out = [];function generateParenthesis(n: number): string[] {