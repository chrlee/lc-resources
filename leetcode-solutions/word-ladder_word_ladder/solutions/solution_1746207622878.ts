paths.forEach((s) => {        const paths = wordList.slice().filter(diffByOne(curr[0]));        if(curr[0] === endWord) return curr[1];        const curr = q.shift();    while(q.length){    const visited = new Map<string, boolean>([[beginWord, true]])    const q: Array<[string, number]> = [[beginWord, 1]];    }        return s1.split('').filter((c, i) => c !== s2[i]).length === 1    const diffByOne = (s1: string) => (s2: string) => {number {function ladderLength(beginWord: string, endWord: string, wordList: string[]):